extends layout

block content
  style(rel='stylesheet' type='text/css' media='screen').
      @font-face { font-family: 'KCC'; src: url("/font/KCC은영체.ttf")}
      @font-face { font-family: '행복고흥'; src: url("/font/행복고흥M.ttf")}
  h1(style="font-family: '행복고흥'; font-size: 3.5em; color: rgba(255,255, 255,1);")= title
    a#exit-btn(href='/' style="font-family: 'KCC'; font-size: 0.5em; color: rgba(255,255, 255,1);") 방 나가기

    #videoCanvas
      img#resultimg(src='' width='320' height='240')
      //img#resultimg(src='' width='240' height='320')
      img#resultimgRemote(src='')
      canvas#photo(width='640' height='480')
      canvas#canvas(width='640' height='480' style = "display:none")
      canvas#photoRemote(width='640' height='480')
      canvas#canvasRemote(width='640' height='480' style = "display:none")
      //- canvas#photo(width='480' height='640')
      //- canvas#canvas(width='480' height='640' style = "display:none")
      //- canvas#photoRemote(width='480' height='640')
      //- canvas#canvasRemote(width='480' height='640' style = "display:none")
      script.
        photo.style.display="none"
        photoRemote.style.display="none"
    #videos
      //- video#localVideo(autoplay='' muted='' playsinline='' width='320' height='240')
      //- video#remoteVideo(autoplay='' muted='' playsinline='' width='640' height='480')
      video#localVideo(autoplay='' muted='' playsinline='' width='0' height='0')
      video#remoteVideo(autoplay='' muted='' playsinline='' width='0' height='0')
      //video#localVideo(src="/hero.mp4" loop controls width='0' height='0' autoplay='')
      //video#remoteVideo(src="/hero.mp4" loop controls width='0' height='0' autoplay='')

    fieldset
      span.legend(style="font-family: 'KCC'; font-size: 0.8em; margin-top: 200px;") 채팅 내용
      #chat-list(style="font-family: 'KCC';  font-size: 0.5em; font-weight: bold; border-radius:20px; background-color:rgb(0,0,0,0.4);")
        for chat in chats
          if chat.user === user
            .mine(chat.user)
              div= chat.user
              if chat.gif
                img(src='/gif/' + chat.gif)
              else
                div= chat.chat
          else if chat.user === 'system'
            .system
              div= chat.chat
          else
            .other(chat.user)
              div= chat.user
              if chat.gif
                img(src='/gif/' + chat.gif)
              else
                div= chat.chat
    form#chat-form(action='/chat' method='post' enctype='multipart/form-data')
      label(for='gif' style="font-family: 'KCC'; font-size: 0.5em; color: rgba(255,255, 255,1);") GIF 올리기
      input#gif(type='file' name='gif' accept='image/gif')
      input#chat(name='chat')
      button.btn.btn-primary(type='submit' class="btn btn-primary btn-sm" ) 전송

    script(src='/socket.io/socket.io.js')
    script(src='https://webrtc.github.io/adapter/adapter-latest.js')
    link(rel='stylesheet' href='/css/skel-noscript.css')
    link(rel='stylesheet' href='/css/style.css')
    link(rel='stylesheet' href='/css/style-desktop.css')
  
  script.
    var socket = io.connect('http://localhost:8005/chat', {
        path: '/socket.io'
      });
      var isChannelReady = false;
      var isInitiator = false;
      var isStarted = false;
      var localStream;
      var pc;
      var remoteStream;
      var turnReady;

      var pcConfig = {
        'iceServers': [{
          'urls': 'stun:stun.l.google.com:19302'
        }]
      };

      var configuration = null;
      var photo = document.getElementById('photo');
      var photoRemote = document.getElementById('photoRemote');
      var canvas = document.getElementById('canvas');
      var canvasRemote = document.getElementById('canvasRemote');
      var photoContext = photo.getContext('2d');
      var photoRemoteContext = photoRemote.getContext('2d');

      var trail = document.getElementById('trail');

      var photoContextW;
      var photoContextH;

      var resultimgContextW;
      var resultimgContextH;

      var sdpConstraints = {
        offerToReceiveAudio: true,
        offerToReceiveVideo: true
      };

      /////////////////////////////////////////////
      var room;
      function switchid(roomId){
        room = roomId;
        console.log('room id in client:' + room);
      }

      socket.on('roomid', function (roomId) {
        switchid(roomId);
      });

      socket.emit('create or join', room);

      socket.on('created', function(room) {
        console.log('Created room ' + room);
        isInitiator = true;
      });

      socket.on('join', function (room){
        console.log('Another peer made a request to join room ' + room);
        console.log('This peer is the initiator of room ' + room + '!');
        isChannelReady = true;
      });

      socket.on('joined', function(room) {
        console.log('joined: ' + room);
        isChannelReady = true;
      });

      socket.on('log', function(array) {
        console.log.apply(console, array);
      });

      ////////////////////////////////////////////////
      function sendMessage(message) {
        console.log('Client sending message: ', message);
        socket.emit('message', message);
      }

      // This client receives a message
      socket.on('message', function(message) {
        console.log('Client received message:', message);
        if (message === 'got user media') {
          maybeStart();
        } else if (message.type === 'offer') {
          if (!isInitiator && !isStarted) {
            maybeStart();
          }
          pc.setRemoteDescription(new RTCSessionDescription(message));
          doAnswer();
        } else if (message.type === 'answer' && isStarted) {
          pc.setRemoteDescription(new RTCSessionDescription(message));
        } else if (message.type === 'candidate' && isStarted) {
          var candidate = new RTCIceCandidate({
            sdpMLineIndex: message.label,
            candidate: message.candidate
          });
          pc.addIceCandidate(candidate);
        } else if (message === 'bye' && isStarted) {
          handleRemoteHangup();
        }
      });

      ////////////////////////////////////////////////////
      var localVideo = document.querySelector('#localVideo');
      var remoteVideo = document.querySelector('#remoteVideo');

      var clientnumber = 0;
      var remoteClientnum;
      var usernum = 0;//추가
      socket.on('GetClientNum',function(clientnum){
        clientnumber = clientnum;
        if(clientnumber % 2 == 0)
          remoteClientnum = clientnumber + 1;
        else
          remoteClientnum = clientnumber - 1;
        getDevices().then(gotDevices).then(getStream);
      })

      function getDevices() {
        if (localStream) {
          localStream.getTracks().forEach(track => {
          track.stop();
          });
        } 
        return navigator.mediaDevices.enumerateDevices();
      }

      var SourceId = "";

      function gotDevices(deviceInfos) {
        var checkDevice= 0;
        for (const deviceInfo of deviceInfos) {
          if (deviceInfo.kind === 'videoinput') {
            if(clientnumber % 2 == 0 && checkDevice == 0) // 수정
            {
              SourceId = deviceInfo.deviceId;
              break;
            }
            else if(checkDevice % 2 == 1 && checkDevice == 1) // 수정
            {
              SourceId = deviceInfo.deviceId;
              break;
            }
            checkDevice++;
          }
        }
      }

      function handleError(error) {
        console.error('Error: ', error);
      }

      function getStream() {
        var constraints = {
          // audio: {deviceId: SourceId ? {exact: SourceId} : undefined}
          video: {deviceId: SourceId ? {exact: SourceId} : undefined}
        };
        return navigator.mediaDevices.getUserMedia(constraints).then(gotStream).catch(handleError);
      }
      
      function gotStream(stream) {
        console.log('Adding local stream.');
        localStream = stream;
        localVideo.srcObject = stream;
        sendMessage('got user media');
        if (isInitiator) {
          maybeStart();
        }
        show();
      }

      if (location.hostname !== 'localhost') {
        requestTurn(
          'https://computeengineondemand.appspot.com/turn?username=41784574&key=4080218913'
        );
      }

      function maybeStart() {
        console.log('>>>>>>> maybeStart() ', isStarted, localStream, isChannelReady);
        if (!isStarted && typeof localStream !== 'undefined' && isChannelReady) {
          console.log('>>>>>> creating peer connection');
          createPeerConnection();
          pc.addStream(localStream);
          isStarted = true;
          console.log('isInitiator', isInitiator);
          if (isInitiator) {
            doCall();
          }
        }
      }

      window.onbeforeunload = function() {
        sendMessage('bye');
      };

      /////////////////////////////////////////////////////////

      function createPeerConnection() {
        try {
          pc = new RTCPeerConnection(null);
          pc.onicecandidate = handleIceCandidate;
          pc.onaddstream = handleRemoteStreamAdded;
          pc.onremovestream = handleRemoteStreamRemoved;
          console.log('Created RTCPeerConnnection');
        } catch (e) {
          console.log('Failed to create PeerConnection, exception: ' + e.message);
          alert('Cannot create RTCPeerConnection object.');
          return;
        }
      }

      function handleIceCandidate(event) {
        console.log('icecandidate event: ', event);
        if (event.candidate) {
          sendMessage({
            type: 'candidate',
            label: event.candidate.sdpMLineIndex,
            id: event.candidate.sdpMid,
            candidate: event.candidate.candidate
          });
        } else {
          console.log('End of candidates.');
        }
      }

      function handleCreateOfferError(event) {
        console.log('createOffer() error: ', event);
      }

      function doCall() {
        console.log('Sending offer to peer');
        pc.createOffer(setLocalAndSendMessage, handleCreateOfferError);
      }

      function doAnswer() {
        console.log('Sending answer to peer.');
        pc.createAnswer().then(
          setLocalAndSendMessage,
          onCreateSessionDescriptionError
        );
      }

      function setLocalAndSendMessage(sessionDescription) {
        pc.setLocalDescription(sessionDescription);
        console.log('setLocalAndSendMessage sending message', sessionDescription);
        sendMessage(sessionDescription);
      }

      function onCreateSessionDescriptionError(error) {
        trace('Failed to create session description: ' + error.toString());
      }

      function requestTurn(turnURL) {
        var turnExists = true;
        if (!turnExists) {
        }
      }

      function handleRemoteStreamAdded(event) {
        console.log('Remote stream added.');
        remoteStream = event.stream;
        remoteVideo.srcObject = remoteStream;
      }

      function handleRemoteStreamRemoved(event) {
        console.log('Remote stream removed. Event: ', event);
      }

      function hangup() {
        console.log('Hanging up.');
        stop();
        sendMessage('bye');
      }

      function handleRemoteHangup() {
        console.log('Session terminated.');
        stop();
        isInitiator = false;
      }

      function stop() {
        isStarted = false;
        pc.close();
        pc = null;
      }
      
      var blob;
      function snapPhoto() {
          photoContext.drawImage(localVideo, 0, 0, photo.width, photo.height); 
          //photo = photoContext.getImageData(0,0,480,640);
          photo = photoContext.getImageData(0,0,640,480);
          canvas.src = ($('#photo')[0]).toDataURL("image/png");

          var imageData = canvas.src;
          var block = imageData.split(";");
          var contentType = block[0].split(":")[1];

          var byteCharacters = atob(imageData.replace(/^data:image\/(png|jpeg|jpg);base64,/,''));
          
          var byteNumbers = new Array(byteCharacters.length);
          for (var i = 0; i < byteCharacters.length; i++) {
            byteNumbers[i] = byteCharacters.charCodeAt(i);
          }
          var byteArray = new Uint8Array(byteNumbers);

          blob = new Blob([byteArray], {type: contentType});
          socket.emit('send',blob, clientnumber);
      }

      setInterval(snapPhoto,200);

      socket.on('get',function(res, cliNum){
        console.log(cliNum, clientnumber)
        var base64d = res.toString("base64");
        var image = new Image();
        image.src = "data:image/gif;base64," + base64d;
        console.log('끼룩');
        if(cliNum == clientnumber)
          document.getElementById("resultimg").src=image.src;
        else
          document.getElementById("resultimgRemote").src=image.src;
        show();
      });

      function show() {
        Array.prototype.forEach.call(arguments, function(elem) {
          elem.style.display = null;
        });
      }

      function hide() {
        Array.prototype.forEach.call(arguments, function(elem) {
          elem.style.display = 'none';
        });
      }

      function sendMessage(message) {
        console.log('Client sending message: ', message);
        socket.emit('message', message);
      }
      
      function sendPhoto() {
        var CHUNK_LEN = 64000;
        console.log('width and height ', photoContextW, photoContextH);
        var img = photoContext.getImageData(0, 0, photoContextW, photoContextH);
        var imgRemote = photoContextRemote.getImageData(0, 0, photoContextW, photoContextH);
        len = img.data.byteLength;
        n = len / CHUNK_LEN | 0;
        
        console.log('Sending a total of ' + len + ' byte(s)');
        
        if (!dataChannel) {
          logError('Connection has not been initiated. ' +
            'Get two peers in the same room first');
          return;
          } else if (dataChannel.readyState === 'closed') {
          logError('Connection was lost. Peer closed the connection.');
          return;
        }
        
        dataChannel.send(len);
        
        for (var i = 0; i < n; i++) {
          var start = i * CHUNK_LEN,
          end = (i + 1) * CHUNK_LEN;
          console.log(start + ' - ' + (end - 1));
          dataChannel.send(img.data.subarray(start, end));
        }
        
        if (len % CHUNK_LEN) {
          console.log('last ' + len % CHUNK_LEN + ' byte(s)');
          dataChannel.send(img.data.subarray(n * CHUNK_LEN));
        }
      }

      socket.on('join', function (data) {
          var div = document.createElement('div');
          div.classList.add('system');
          var chat = document.createElement('div');
          div.textContent = data.chat;
          div.appendChild(chat);
          document.querySelector('#chat-list').appendChild(div);
        });
        socket.on('exit', function (data) {
          var div = document.createElement('div');
          div.classList.add('system');
          var chat = document.createElement('div');
          div.textContent = data.chat;
          div.appendChild(chat);
          document.querySelector('#chat-list').appendChild(div);
        });
        socket.on('chat', function (data) {
          var div = document.createElement('div');
          //if (data.user === '#{user}') 
          if(usernum<2)//추가
          {
            div.classList.add('mine');
          } else {
            div.classList.add('other');
          }
          var name = document.createElement('div');
          usernum++;
          if(usernum<3)
            name.textContent = '유진';
          else
            name.textContent = '정기';
          div.appendChild(name);
          if (data.chat) {
            var chat = document.createElement('div');
            chat.textContent = data.chat;
            div.appendChild(chat);
          } else {
            var gif = document.createElement('img');
            gif.src = '/gif/' + data.gif;
            div.appendChild(gif);
          }
          //div.style.color = data.user;
          document.querySelector('#chat-list').appendChild(div);
        });
        document.querySelector('#chat-form').addEventListener('submit', function (e) {
          e.preventDefault();
          if (e.target.chat.value) {
            var xhr = new XMLHttpRequest();
            xhr.onload = function () {
              if (xhr.status === 200) {
                e.target.chat.value = '';
              } else {
                console.error(xhr.responseText);
              }
            };
            xhr.open('POST', '/room/#{room._id}/chat');
            xhr.setRequestHeader('Content-Type', 'application/json');
            xhr.send(JSON.stringify({ chat: this.chat.value }));
          }
        });
        document.querySelector('#gif').addEventListener('change', function (e) {
          var formData = new FormData();
          var xhr = new XMLHttpRequest();
          console.log(e.target.files);
          formData.append('gif', e.target.files[0]);
          xhr.onload = function () {
            if (xhr.status === 200) {
              e.target.file = null;
            } else {
              console.error(xhr.responseText);
            }
          };
          xhr.open('POST', '/room/#{room._id}/gif');
          xhr.send(formData);
        });
